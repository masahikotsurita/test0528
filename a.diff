diff --git "a/\351\226\223\351\201\225\343\201\204\343\202\204\343\201\231\343\201\204\347\224\250\350\252\236\343\203\201\343\202\247\343\203\203\343\202\257.py" "b/\351\226\223\351\201\225\343\201\204\343\202\204\343\201\231\343\201\204\347\224\250\350\252\236\343\203\201\343\202\247\343\203\203\343\202\257.py"
index a7e61366327f381cbc93ddb2a10e1660fb007247..e82e091f13b0d061328cbf785253af3f3553f77d 100644
--- "a/\351\226\223\351\201\225\343\201\204\343\202\204\343\201\231\343\201\204\347\224\250\350\252\236\343\203\201\343\202\247\343\203\203\343\202\257.py"
+++ "b/\351\226\223\351\201\225\343\201\204\343\202\204\343\201\231\343\201\204\347\224\250\350\252\236\343\203\201\343\202\247\343\203\203\343\202\257.py"
@@ -58,50 +58,57 @@ def log(message):
     with open(log_path, 'a', encoding='utf-8') as f:
         f.write(f"{message}\n")
 
 def edit_ini(path):
     if os.path.exists(path):
         config.read(path, encoding="utf-8")
 
     # Upgrade old style section if necessary
     if "Replacements" in config and "Replacement1" not in config:
         config["Replacement1"] = {}
         for k, v in config["Replacements"].items():
             config["Replacement1"][k] = v
         config.remove_section("Replacements")
 
     for i in range(1, 6):
         section = f"Replacement{i}"
         if section not in config:
             config[section] = {}
 
     if "Settings" not in config:
         config["Settings"] = {"ActiveReplacement": "Replacement1"}
 
     root = tk.Tk()
     root.title("間違いやすい用語チェック.ini 編集")
 
+    instructions = (
+        "実行方法：チェックしたいファイルをexeにドロップして実行します。\n"
+        "設定方法：ドロップせずに実行すると設定モード（この画面）が起動します。\n"
+        "「選択中の単語グループ」の中の単語が検索対象になります。"
+    )
+    tk.Label(root, text=instructions, justify="left").pack(padx=10, pady=(10, 0), anchor="w")
+
     style = ttk.Style()
     style.configure("Bold.TNotebook.Tab", padding=[6, 4])
     style.map(
         "Bold.TNotebook.Tab",
         font=[("selected", ("TkDefaultFont", 9, "bold")), ("!selected", ("TkDefaultFont", 9, "normal"))],
     )
 
     notebook = ttk.Notebook(root, style="Bold.TNotebook")
     notebook.pack(padx=10, pady=10)
 
     widgets = {}
 
     def make_refresh(sec, lb):
         def _refresh():
             lb.delete(0, tk.END)
             for k, v in config[sec].items():
                 lb.insert(tk.END, f"{k} = {v}")
         return _refresh
 
     for i in range(1, 6):
         sec = f"Replacement{i}"
         frame = tk.Frame(notebook)
         notebook.add(frame, text=sec)
 
         lb = tk.Listbox(frame, width=50, height=15)
