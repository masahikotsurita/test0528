diff --git "a/\351\226\223\351\201\225\343\201\204\343\202\204\343\201\231\343\201\204\347\224\250\350\252\236\343\203\201\343\202\247\343\203\203\343\202\257.py" "b/\351\226\223\351\201\225\343\201\204\343\202\204\343\201\231\343\201\204\347\224\250\350\252\236\343\203\201\343\202\247\343\203\203\343\202\257.py"
index 5643a57c50f39349ea394e0cad198535b84eac7f..aee90d28da2dbe9d8f1bfa542043a4d9ead82b21 100644
--- "a/\351\226\223\351\201\225\343\201\204\343\202\204\343\201\231\343\201\204\347\224\250\350\252\236\343\203\201\343\202\247\343\203\203\343\202\257.py"
+++ "b/\351\226\223\351\201\225\343\201\204\343\202\204\343\201\231\343\201\204\347\224\250\350\252\236\343\203\201\343\202\247\343\203\203\343\202\257.py"
@@ -211,64 +211,79 @@ def edit_ini(path):
         with open(path, "w", encoding="utf-8") as f:
             config.write(f)
         root.destroy()
 
     def on_add(event=None):
         widgets[current_section()]["on_add"]()
 
     def on_del(event=None):
         widgets[current_section()]["on_delete"]()
 
     root.bind("<Delete>", on_del)
     root.bind("<Control-s>", on_save)
 
     def focus_current(event=None):
         widgets[current_section()]["entry_key"].focus_set()
 
     notebook.bind("<<NotebookTabChanged>>", focus_current)
     root.after(100, focus_current)
 
     tk.Button(root, text="保存して終了", command=on_save).pack(pady=5)
 
     root.mainloop()
 
 def search_text_in_docx(path, keywords, replacements):
     from docx import Document
+    from docx.oxml.table import CT_Tbl
+    from docx.oxml.text.paragraph import CT_P
+    from docx.table import Table
+    from docx.text.paragraph import Paragraph
+
     log(f"――――　ファイル: {os.path.basename(path)}　――――")
     doc = Document(path)
     current_heading = "章番号不明"
-    for para in doc.paragraphs:
-        if para.style.name.startswith("Heading"):
-            # 見出し段落の先頭番号を見出し番号として扱う（例: "1.1 概要" → "1.1"）
-            split_text = para.text.strip().split()
-            if split_text and any(char.isdigit() for char in split_text[0]):
-                current_heading = split_text[0]
-            else:
-                current_heading = para.text.strip()
-        for k, r in zip(keywords, replacements):
-            if k in para.text:
-                log(f"{current_heading}: '{k}' → '{r}'")
+
+    for element in doc.element.body:
+        if isinstance(element, CT_P):
+            para = Paragraph(element, doc)
+            if para.style.name.startswith("Heading"):
+                # 見出し段落の先頭番号を見出し番号として扱う（例: "1.1 概要" → "1.1"）
+                split_text = para.text.strip().split()
+                if split_text and any(char.isdigit() for char in split_text[0]):
+                    current_heading = split_text[0]
+                else:
+                    current_heading = para.text.strip()
+            for k, r in zip(keywords, replacements):
+                if k in para.text:
+                    log(f"{current_heading}: '{k}' → '{r}'")
+        elif isinstance(element, CT_Tbl):
+            table = Table(element, doc)
+            for row in table.rows:
+                for cell in row.cells:
+                    for k, r in zip(keywords, replacements):
+                        if k in cell.text:
+                            log(f"{current_heading}: '{k}' → '{r}'")
 
 def search_text_in_xlsx(path, keywords, replacements):
     from openpyxl import load_workbook
     log(f"――――　ファイル: {os.path.basename(path)}　――――")
     wb = load_workbook(path)
     for sheet in wb.worksheets:
         for row in sheet.iter_rows():
             for cell in row:
                 if cell.value and isinstance(cell.value, str):
                     for k, r in zip(keywords, replacements):
                         if k in cell.value:
                             log(f"シート'{sheet.title}' セル{cell.coordinate}: '{k}' → '{r}'")
 
 def search_text_in_pptx(path, keywords, replacements):
     from pptx import Presentation
     from pptx.table import Table
     log(f"――――　ファイル: {os.path.basename(path)}　――――")
     prs = Presentation(path)
     for i, slide in enumerate(prs.slides):
         for shape in slide.shapes:
             if shape.has_text_frame:
                 for k, r in zip(keywords, replacements):
                     if k in shape.text:
                         log(f"スライド{i+1}: '{k}' → '{r}'")
             elif shape.has_table:
