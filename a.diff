diff --git "a/\351\226\223\351\201\225\343\201\204\343\202\204\343\201\231\343\201\204\347\224\250\350\252\236\343\203\201\343\202\247\343\203\203\343\202\257.py" "b/\351\226\223\351\201\225\343\201\204\343\202\204\343\201\231\343\201\204\347\224\250\350\252\236\343\203\201\343\202\247\343\203\203\343\202\257.py"
index 33e177b24fd5a10abb5ebfe68a571a0057299848..5e978a2631643095d8ea956f8f39a3e81644ef76 100644
--- "a/\351\226\223\351\201\225\343\201\204\343\202\204\343\201\231\343\201\204\347\224\250\350\252\236\343\203\201\343\202\247\343\203\203\343\202\257.py"
+++ "b/\351\226\223\351\201\225\343\201\204\343\202\204\343\201\231\343\201\204\347\224\250\350\252\236\343\203\201\343\202\247\343\203\203\343\202\257.py"
@@ -1,29 +1,30 @@
 import os
 import sys
 import datetime
 import configparser
+import subprocess
 import tkinter as tk
 from tkinter import ttk, messagebox
 
 if os.name == 'nt':
     try:
         import ctypes
         ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
     except Exception:
         pass
 
 # iniファイルからkeywordsとreplacementsを読み込む
 config = configparser.ConfigParser()
 
 # 実行ファイルの配置ディレクトリを基準とする
 if getattr(sys, 'frozen', False):
     base_path = os.path.dirname(sys.executable)  # PyInstaller実行環境
 else:
     base_path = os.path.dirname(__file__)
 
 # PyInstallerの --add-data でバンドルされた ini も探索する
 ini_candidates = [os.path.join(base_path, '間違いやすい用語チェック.ini')]
 if getattr(sys, '_MEIPASS', None):
     ini_candidates.append(os.path.join(sys._MEIPASS, '間違いやすい用語チェック.ini'))
 
 ini_path = None
@@ -36,71 +37,84 @@ if ini_path is None:
 
 def load_replacements():
     """Load keywords and replacements from the selected section."""
     config.read(ini_path, encoding="utf-8")
 
     # Determine the active replacement section
     active = config.get("Settings", "ActiveReplacement", fallback="Replacement1")
     if active not in config:
         active = "Replacement1"
 
     keywords, replacements = [], []
     for k, r in config.items(active):
         keywords.append(k)
         replacements.append(r)
 
     return keywords, replacements
 
 # ログファイルは exe と同じディレクトリに保存する
 log_filename = f"{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}_ReplaceLog.txt"
 log_path = os.path.join(base_path, log_filename)
 
 def log(message):
     with open(log_path, 'a', encoding='utf-8') as f:
         f.write(f"{message}\n")
 
+def open_folder():
+    """Open the folder where this program resides."""
+    try:
+        if os.name == 'nt':
+            os.startfile(base_path)
+        elif sys.platform == 'darwin':
+            subprocess.Popen(['open', base_path])
+        else:
+            subprocess.Popen(['xdg-open', base_path])
+    except Exception as e:
+        messagebox.showerror('エラー', f'フォルダを開けませんでした:\n{e}')
+
 def edit_ini(path):
     if os.path.exists(path):
         config.read(path, encoding="utf-8")
 
     # Upgrade old style section if necessary
     if "Replacements" in config and "Replacement1" not in config:
         config["Replacement1"] = {}
         for k, v in config["Replacements"].items():
             config["Replacement1"][k] = v
         config.remove_section("Replacements")
 
     for i in range(1, 6):
         section = f"Replacement{i}"
         if section not in config:
             config[section] = {}
 
     if "Settings" not in config:
         config["Settings"] = {"ActiveReplacement": "Replacement1"}
 
     root = tk.Tk()
     root.title("間違いやすい用語チェック.ini 編集")
+    tk.Button(root, text="フォルダを開く", command=open_folder).pack(anchor="ne", padx=10, pady=(10, 0))
 
     instructions = (
         "\n"
         "実行方法：チェックしたいファイルをexeにドロップして実行します。\n\n"
         "設定方法：ドロップせずに実行すると設定モード（この画面）が起動します。\n"
         "　　　　　「選択中の単語グループ」の中の単語が検索対象になります。"
         "\n"
 
     )
     tk.Label(root, text=instructions, justify="left").pack(padx=10, pady=(10, 0), anchor="w")
 
     style = ttk.Style()
     style.configure("Bold.TNotebook.Tab", padding=[6, 4])
     style.map(
         "Bold.TNotebook.Tab",
         font=[("selected", ("TkDefaultFont", 9, "bold")), ("!selected", ("TkDefaultFont", 9, "normal"))],
     )
 
     notebook = ttk.Notebook(root, style="Bold.TNotebook")
     notebook.pack(padx=10, pady=10)
 
     widgets = {}
 
     def make_refresh(sec, lb):
         def _refresh():
@@ -188,68 +202,68 @@ def edit_ini(path):
         btn_del = tk.Button(frame, text="削除", width=10, command=on_delete)
         btn_del.grid(row=2, column=3, padx=5, pady=5)
 
         widgets[sec] = {
             "entry_key": ek,
             "refresh": refresh_func,
             "on_add": on_add_update,
             "on_delete": on_delete,
         }
 
         refresh_func()
 
     active_var = tk.StringVar(value=config["Settings"].get("ActiveReplacement", "Replacement1"))
     tk.Label(root, text="選択中の単語グループ").pack()
     selector = ttk.Combobox(root, textvariable=active_var, values=[f"Replacement{i}" for i in range(1, 6)], state="readonly")
     selector.pack(pady=5)
 
     def current_section():
         idx = notebook.index(notebook.select())
         return f"Replacement{idx + 1}"
 
     def on_save(event=None):
         config.setdefault("Settings", {})["ActiveReplacement"] = active_var.get()
         with open(path, "w", encoding="utf-8") as f:
             config.write(f)
-        root.destroy()
+        # 保存後もウインドウは閉じない
 
     def on_add(event=None):
         widgets[current_section()]["on_add"]()
 
     def on_del(event=None):
         widgets[current_section()]["on_delete"]()
 
     root.bind("<Delete>", on_del)
     root.bind("<Control-s>", on_save)
 
     def focus_current(event=None):
         widgets[current_section()]["entry_key"].focus_set()
 
     notebook.bind("<<NotebookTabChanged>>", focus_current)
     root.after(100, focus_current)
 
-    tk.Button(root, text="保存して終了", command=on_save).pack(pady=5)
+    tk.Button(root, text="保存", command=on_save).pack(pady=5)
 
     root.mainloop()
 
 def search_text_in_docx(path, keywords, replacements):
     from docx import Document
     from docx.oxml.text.paragraph import CT_P
     from docx.text.paragraph import Paragraph
 
     log(f"――――　ファイル: {os.path.basename(path)}　――――")
     doc = Document(path)
     current_heading = "章番号不明"
 
     for element in doc.element.body.iter():
         if isinstance(element, CT_P):
             para = Paragraph(element, doc)
             if para.style.name.startswith("Heading"):
                 # 見出し段落の先頭番号を見出し番号として扱う（例: "1.1 概要" → "1.1"）
                 split_text = para.text.strip().split()
                 if split_text and any(char.isdigit() for char in split_text[0]):
                     current_heading = split_text[0]
                 else:
                     current_heading = para.text.strip()
             for k, r in zip(keywords, replacements):
                 if k in para.text:
                     log(f"{current_heading}: '{k}' → '{r}'")
